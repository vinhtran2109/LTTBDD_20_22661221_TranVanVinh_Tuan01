/**
 * File: app/cart.tsx
 * M√¥ t·∫£: Trang Gi·ªè h√†ng - hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a gi·ªè
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { useRouter } from 'expo-router';
import { InvoiceItem } from '../src/models/types';
import {
  getCartWithProducts,
  updateCartItemQty,
  removeFromCart,
  getCartTotal,
} from '../src/db/cart.repo';
import { getProductById } from '../src/db/product.repo';

export default function CartScreen() {
  const router = useRouter();
  const [cartItems, setCartItems] = useState<InvoiceItem[]>([]);
  const [total, setTotal] = useState(0);

  // Load gi·ªè h√†ng
  const loadCart = () => {
    try {
      const items = getCartWithProducts();
      setCartItems(items);
      
      const cartTotal = getCartTotal();
      setTotal(cartTotal);
    } catch (error) {
      console.error('Error loading cart:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng');
    }
  };

  useEffect(() => {
    loadCart();
  }, []);

  // X·ª≠ l√Ω tƒÉng s·ªë l∆∞·ª£ng
  const handleIncrease = (productId: string, currentQty: number) => {
    try {
      // TODO: Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi tƒÉng
      const product = getProductById(productId);
      
      if (!product) {
        Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
        return;
      }

      if (currentQty >= product.stock) {
        Alert.alert('Th√¥ng b√°o', `Ch·ªâ c√≤n ${product.stock} s·∫£n ph·∫©m trong kho`);
        return;
      }

      updateCartItemQty(productId, currentQty + 1);
      loadCart();
    } catch (error) {
      console.error('Error increasing quantity:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng');
    }
  };

  // X·ª≠ l√Ω gi·∫£m s·ªë l∆∞·ª£ng
  const handleDecrease = (productId: string, currentQty: number) => {
    try {
      if (currentQty <= 1) {
        // N·∫øu s·ªë l∆∞·ª£ng = 1, h·ªèi x√°c nh·∫≠n xo√°
        Alert.alert(
          'X√°c nh·∫≠n',
          'B·∫°n c√≥ mu·ªën xo√° s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?',
          [
            { text: 'Hu·ª∑', style: 'cancel' },
            {
              text: 'Xo√°',
              style: 'destructive',
              onPress: () => {
                removeFromCart(productId);
                loadCart();
              },
            },
          ]
        );
      } else {
        updateCartItemQty(productId, currentQty - 1);
        loadCart();
      }
    } catch (error) {
      console.error('Error decreasing quantity:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng');
    }
  };

  // X·ª≠ l√Ω xo√° s·∫£n ph·∫©m
  const handleRemove = (productId: string) => {
    Alert.alert(
      'X√°c nh·∫≠n',
      'B·∫°n c√≥ ch·∫Øc mu·ªën xo√° s·∫£n ph·∫©m n√†y?',
      [
        { text: 'Hu·ª∑', style: 'cancel' },
        {
          text: 'Xo√°',
          style: 'destructive',
          onPress: () => {
            try {
              removeFromCart(productId);
              loadCart();
              Alert.alert('Th√†nh c√¥ng', 'ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè');
            } catch (error) {
              console.error('Error removing item:', error);
              Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m');
            }
          },
        },
      ]
    );
  };

  // X·ª≠ l√Ω xem ho√° ƒë∆°n
  const handleViewInvoice = () => {
    if (cartItems.length === 0) {
      Alert.alert('Th√¥ng b√°o', 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng');
      return;
    }
    router.push('/invoice');
  };

  // Format ti·ªÅn t·ªá
  const formatCurrency = (amount: number): string => {
    return amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
  };

  // Render t·ª´ng item trong gi·ªè
  const renderCartItem = ({ item }: { item: InvoiceItem }) => (
    <View style={styles.cartItem}>
      <View style={styles.itemInfo}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemPrice}>{formatCurrency(item.price)}</Text>
        <Text style={styles.itemSubtotal}>
          T·∫°m t√≠nh: <Text style={styles.subtotalAmount}>{formatCurrency(item.subtotal)}</Text>
        </Text>
      </View>
      
      <View style={styles.itemActions}>
        {/* ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng */}
        <View style={styles.qtyControls}>
          <TouchableOpacity
            style={styles.qtyButton}
            onPress={() => handleDecrease(item.product_id, item.qty)}
          >
            <Text style={styles.qtyButtonText}>‚àí</Text>
          </TouchableOpacity>
          
          <Text style={styles.qtyText}>{item.qty}</Text>
          
          <TouchableOpacity
            style={styles.qtyButton}
            onPress={() => handleIncrease(item.product_id, item.qty)}
          >
            <Text style={styles.qtyButtonText}>+</Text>
          </TouchableOpacity>
        </View>
        
        {/* N√∫t xo√° */}
        <TouchableOpacity
          style={styles.removeButton}
          onPress={() => handleRemove(item.product_id)}
        >
          <Text style={styles.removeButtonText}>üóëÔ∏è Xo√°</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      {/* Danh s√°ch gi·ªè h√†ng */}
      <FlatList
        data={cartItems}
        renderItem={renderCartItem}
        keyExtractor={(item) => item.product_id}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>üõí Gi·ªè h√†ng tr·ªëng</Text>
            <TouchableOpacity
              style={styles.shopButton}
              onPress={() => router.back()}
            >
              <Text style={styles.shopButtonText}>Ti·∫øp t·ª•c mua s·∫Øm</Text>
            </TouchableOpacity>
          </View>
        }
      />

      {/* Footer: T·ªïng ti·ªÅn v√† n√∫t xem ho√° ƒë∆°n */}
      {cartItems.length > 0 && (
        <View style={styles.footer}>
          <View style={styles.totalContainer}>
            <Text style={styles.totalLabel}>T·∫°m t√≠nh:</Text>
            <Text style={styles.totalAmount}>{formatCurrency(total)}</Text>
          </View>
          
          <TouchableOpacity
            style={styles.invoiceButton}
            onPress={handleViewInvoice}
          >
            <Text style={styles.invoiceButtonText}>Xem ho√° ƒë∆°n ‚Üí</Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  cartItem: {
    backgroundColor: '#fff',
    padding: 15,
    marginHorizontal: 10,
    marginVertical: 5,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  itemInfo: {
    marginBottom: 10,
  },
  itemName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 5,
  },
  itemPrice: {
    fontSize: 14,
    color: '#666',
    marginBottom: 3,
  },
  itemSubtotal: {
    fontSize: 13,
    color: '#666',
  },
  subtotalAmount: {
    fontWeight: '700',
    color: '#2196F3',
  },
  itemActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  qtyControls: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
    borderRadius: 5,
    padding: 5,
  },
  qtyButton: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 3,
  },
  qtyButtonText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2196F3',
  },
  qtyText: {
    fontSize: 16,
    fontWeight: '600',
    marginHorizontal: 15,
    color: '#333',
  },
  removeButton: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    backgroundColor: '#f44336',
    borderRadius: 5,
  },
  removeButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 13,
  },
  footer: {
    backgroundColor: '#fff',
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: '#ddd',
  },
  totalContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  totalLabel: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  totalAmount: {
    fontSize: 20,
    fontWeight: '700',
    color: '#4CAF50',
  },
  invoiceButton: {
    backgroundColor: '#FF9800',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
  invoiceButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '700',
  },
  emptyContainer: {
    padding: 60,
    alignItems: 'center',
  },
  emptyText: {
    fontSize: 18,
    color: '#999',
    marginBottom: 20,
  },
  shopButton: {
    backgroundColor: '#2196F3',
    paddingHorizontal: 30,
    paddingVertical: 12,
    borderRadius: 8,
  },
  shopButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
